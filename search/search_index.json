{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nvim-Toolkit","text":"<p>Shared runtime utilities library for Neovim plugins and configurations</p> <p> </p> <p>Nvim-Toolkit provides commonly needed functionality for Neovim plugin and configuration development, including:</p> <ul> <li>UI Components \u2013 Floating windows, notifications, and UI helpers</li> <li>Logging System \u2013 Multiple log levels, file rotation, configurable formats</li> <li>Filesystem Utilities \u2013 Path handling, file operations, project root detection</li> <li>Neovim API Wrappers \u2013 Simplified autocmd creation, buffer/window management</li> <li>Configuration Utilities \u2013 Settings management, validation, defaults with overrides</li> <li>Keymap Management \u2013 Fluent API for keymappings, which-key integration</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#using-packernvim","title":"Using packer.nvim","text":"<pre><code>use {'greggh/nvim-toolkit'}\n</code></pre>"},{"location":"#using-lazynvim","title":"Using lazy.nvim","text":"<pre><code>{\n  'greggh/nvim-toolkit',\n  lazy = true\n}\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>-- Basic usage\nlocal toolkit = require('nvim_toolkit')\n\n-- Initialize with default options\ntoolkit.setup()\n\n-- Or with custom options\ntoolkit.setup({\n  log = {\n    level = \"debug\",\n    file = vim.fn.stdpath(\"cache\") .. \"/logs/myapp.log\"\n  },\n  ui = {\n    float = {\n      border = \"single\"\n    }\n  }\n})\n\n-- Use individual modules\nlocal log = require('nvim_toolkit.log')\nlog.info(\"Application started\")\n\nlocal ui = require('nvim_toolkit.ui')\n-- Create floating window, etc.\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Neovim &gt;= 0.8.0</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Nothing yet</li> </ul>"},{"location":"changelog/#010-2025-03-05","title":"0.1.0 - 2025-03-05","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial project structure</li> <li>Core module architecture (ui, log, fs, api, config, keymap)</li> <li>Basic module setup functionality</li> <li>Documentation for all modules</li> <li>Installation and usage instructions</li> <li>Git submodule integration guide</li> <li>Keymap module with fluent API and which-key integration</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to nvim-toolkit! This document outlines the process for contributing to this project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally    <pre><code>git clone https://github.com/YOUR_USERNAME/nvim-toolkit.git\ncd nvim-toolkit\n</code></pre></li> <li>Install development dependencies    <pre><code># Install StyLua and Luacheck if you don't have them globally\nluarocks install --local stylua\nluarocks install --local luacheck\n</code></pre></li> <li>Set up pre-commit hooks (recommended)    <pre><code>./scripts/install_hooks.sh\n</code></pre></li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a feature branch    <pre><code>git checkout -b feature/my-feature\n</code></pre></li> <li>Make your changes</li> <li>Run tests    <pre><code>make test\n</code></pre></li> <li>Lint your code    <pre><code>make lint\n</code></pre></li> <li>Commit your changes with a clear commit message</li> <li>Push your branch to your fork</li> <li>Create a Pull Request</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow these style guidelines:</p> <ul> <li>Use StyLua for formatting</li> <li>Follow the Lua style guide</li> <li>Document all public functions with LuaDoc comments</li> <li>Write tests for all new functionality</li> </ul>"},{"location":"contributing/#adding-new-features","title":"Adding New Features","text":"<p>When adding a new feature:</p> <ol> <li>Add the feature to the appropriate module</li> <li>Add documentation in the module's header</li> <li>Update the README.md if necessary</li> <li>Add examples to the examples directory</li> <li>Update CHANGELOG.md with your changes</li> </ol>"},{"location":"contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning. To update the version:</p> <ol> <li>Run <code>scripts/version_bump.lua &lt;new_version&gt;</code></li> <li>Review the changes</li> <li>Commit with message \"Release: Version X.Y.Z\"</li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md/documentation with details of changes</li> <li>Update CHANGELOG.md with your changes under the Unreleased section</li> <li>Make sure all tests pass</li> <li>The PR will be merged once it receives approval from maintainers</li> </ol> <p>Thank you for your contributions!</p>"},{"location":"modules/log/","title":"Log Module","text":"<p>The log module provides a comprehensive logging system for Neovim plugins.</p>"},{"location":"modules/log/#basic-usage","title":"Basic Usage","text":"<pre><code>local log = require('nvim_toolkit.log')\n\n-- Log at different levels\nlog.debug(\"Debug message\", { details = \"some_value\" })\nlog.info(\"Information message\")\nlog.warn(\"Warning message\")\nlog.error(\"Error message\", { code = 500 })\n\n-- Configure log level\nlog.set_level(log.levels.DEBUG) -- Show all messages\nlog.set_level(log.levels.WARN)  -- Only show warnings and errors\n</code></pre>"},{"location":"modules/log/#configuration","title":"Configuration","text":"<p>You can configure the logging system when initializing the toolkit:</p> <pre><code>require('nvim_toolkit').setup({\n  log = {\n    level = \"info\",                                       -- Log level (debug, info, warn, error)\n    file = vim.fn.stdpath(\"cache\") .. \"/logs/myapp.log\", -- Log file path\n    use_colors = true,                                    -- Use colors in console output\n    max_size = 1024 * 1024,                               -- Maximum log file size (1MB)\n    use_console = true                                    -- Also output to console\n  }\n})\n</code></pre> <p>Or configure it directly:</p> <pre><code>local log = require('nvim_toolkit.log')\nlog.setup({\n  level = \"debug\",\n  file = \"/path/to/logs/myapp.log\"\n})\n</code></pre>"},{"location":"modules/log/#log-levels","title":"Log Levels","text":"<p>The log module supports the following log levels:</p> Level Description <code>DEBUG</code> Detailed information for debugging <code>INFO</code> General information about normal operation <code>WARN</code> Warnings that don't prevent operation <code>ERROR</code> Errors that may prevent correct operation"},{"location":"modules/log/#additional-features","title":"Additional Features","text":""},{"location":"modules/log/#context-information","title":"Context Information","text":"<p>You can provide additional context with each log message:</p> <pre><code>log.info(\"User performed action\", {\n  user = \"someone\",\n  action = \"save\",\n  time_taken = 123\n})\n</code></pre>"},{"location":"modules/log/#in-memory-logging-for-tests","title":"In-Memory Logging for Tests","text":"<p>For testing, you can switch to in-memory logging:</p> <pre><code>log.setup({\n  use_memory = true,\n  use_file = false,\n  use_console = false\n})\n\n-- Later, retrieve logged messages\nlocal messages = log.get_memory_log()\nassert(#messages &gt; 0, \"No messages were logged\")\n</code></pre>"},{"location":"modules/log/#log-file-rotation","title":"Log File Rotation","text":"<p>The log module automatically rotates log files when they reach the configured <code>max_size</code>:</p> <pre><code>log.setup({\n  file = \"/path/to/log.txt\",\n  max_size = 1024 * 1024, -- 1MB\n  backup_count = 3         -- Keep 3 rotated files\n})\n</code></pre>"},{"location":"modules/ui/","title":"UI Module","text":"<p>The UI module provides components for creating user interfaces in Neovim, including floating windows and notifications.</p>"},{"location":"modules/ui/#floating-windows","title":"Floating Windows","text":"<p>The <code>float</code> submodule provides utilities for creating and managing floating windows:</p> <pre><code>local ui = require('nvim_toolkit.ui')\n\n-- Create a simple floating window\nlocal win_id, buf_id = ui.float.open({\n  title = \"My Window\",\n  content = {\"Line 1\", \"Line 2\", \"Line 3\"},\n  width = 60,\n  height = 10,\n  border = \"rounded\"\n})\n\n-- Close a window\nui.float.close(win_id)\n\n-- Update window content\nui.float.update_content(buf_id, {\"New line 1\", \"New line 2\"})\n\n-- Center a window\nui.float.center(win_id)\n</code></pre>"},{"location":"modules/ui/#float-window-options","title":"Float Window Options","text":"<p>The <code>float.open()</code> function accepts the following options:</p> Option Type Description <code>title</code> string Window title <code>content</code> table Array of strings for the window content <code>width</code> number Window width (in columns) <code>height</code> number Window height (in rows) <code>row</code> number Window position row <code>col</code> number Window position column <code>relative</code> string Position relative to (\"editor\", \"win\", \"cursor\") <code>border</code> string Border style (\"none\", \"single\", \"double\", \"rounded\", etc.) <code>filetype</code> string Buffer filetype <code>keymaps</code> table Keymaps for the window <code>on_close</code> function Callback when window is closed"},{"location":"modules/ui/#notifications","title":"Notifications","text":"<p>The <code>notify</code> submodule provides a simple notification system:</p> <pre><code>local ui = require('nvim_toolkit.ui')\n\n-- Show notifications at different levels\nui.notify.info(\"This is an info notification\")\nui.notify.warn(\"This is a warning\", { timeout = 5000 })\nui.notify.error(\"This is an error\", { title = \"Error\" })\nui.notify.debug(\"Debug information\")\n\n-- Or use the generic notify function\nui.notify(\"Custom notification\", \"info\", {\n  timeout = 3000,\n  title = \"Custom\"\n})\n</code></pre>"},{"location":"modules/ui/#notification-options","title":"Notification Options","text":"<p>The notification functions accept the following options:</p> Option Type Description <code>timeout</code> number Time in milliseconds before the notification auto-closes <code>title</code> string Notification title <code>icon</code> string Icon to display with the notification <code>position</code> string Where to show the notification (\"top\", \"bottom\", etc.)"},{"location":"usage/examples/","title":"Examples","text":"<p>This page contains examples of how to use nvim-toolkit.</p>"},{"location":"usage/examples/#basic-example","title":"Basic Example","text":"<p>This example demonstrates how to use the toolkit with default configuration:</p> <pre><code>-- Initialize with default settings\nlocal toolkit = require('nvim_toolkit')\ntoolkit.setup()\n\n-- Log messages\nlocal log = require('nvim_toolkit.log')\nlog.info(\"Application started\")\nlog.debug(\"Here's some debug info\")\nlog.warn(\"Warning message\")\nlog.error(\"Error occurred\", { code = 500 })\n\n-- Create a floating window\nlocal ui = require('nvim_toolkit.ui')\nlocal win_id, buf_id = ui.float.open({\n  title = \"Example Window\",\n  content = {\n    \"This is a floating window\",\n    \"\",\n    \"Press q to close it\"\n  },\n  keymaps = {\n    n = {\n      q = { \"&lt;cmd&gt;lua vim.api.nvim_win_close(0, true)&lt;CR&gt;\", \"Close window\" }\n    }\n  }\n})\n</code></pre>"},{"location":"usage/examples/#keymap-example","title":"Keymap Example","text":"<p>This example demonstrates the keymap module's fluent API:</p> <pre><code>local keymap = require('nvim_toolkit.keymap')\nlocal bind = keymap.bind\n\n-- Create mappings with the fluent API\nlocal my_mapping = bind.map_cr(\"echo 'Hello'\")\n  :with_desc(\"Say hello\")\n  :with_noremap()\n  :with_silent()\n\n-- Register mappings with a common prefix\nkeymap.register_group(\"&lt;leader&gt;f\", {\n  f = bind.map_cr(\"Telescope find_files\"):with_desc(\"Find files\"):with_common_options(),\n  g = bind.map_cr(\"Telescope live_grep\"):with_desc(\"Grep files\"):with_common_options(),\n  r = bind.map_cr(\"Telescope oldfiles\"):with_desc(\"Recent files\"):with_common_options(),\n}, \"file\")\n\n-- Create terminal-specific keymaps\nvim.api.nvim_create_autocmd(\"TermOpen\", {\n  callback = function(args)\n    keymap.set_terminal_keymaps(args.buf, {\n      window_navigation = true,\n      custom = {\n        [\"&lt;Esc&gt;\"] = { cmd = [[&lt;C-\\&gt;&lt;C-n&gt;]], desc = \"Exit terminal mode\" }\n      }\n    })\n  end\n})\n</code></pre>"},{"location":"usage/examples/#configuration-validation-example","title":"Configuration Validation Example","text":"<p>This example demonstrates how to use the configuration validation system:</p> <pre><code>local config = require('nvim_toolkit.config')\n\n-- Define a schema for your configuration\nlocal schema = {\n  window_size = {\n    type = \"number\",\n    min = 10,\n    max = 200,\n    default = 80\n  },\n  format = {\n    type = \"string\",\n    enum = {\"json\", \"yaml\", \"toml\"},\n    default = \"json\"\n  },\n  retry = {\n    type = \"boolean\",\n    default = false\n  },\n  nested = {\n    type = \"table\",\n    schema = {\n      timeout = {\n        type = \"number\",\n        default = 1000\n      }\n    }\n  }\n}\n\n-- User configuration\nlocal user_config = {\n  window_size = 100,\n  format = \"json\",\n  retry = true,\n  -- Note: nested.timeout will get default value\n}\n\n-- Validate the configuration\nlocal validated = config.validate(user_config, schema)\n-- validated now contains the validated config with defaults applied\n</code></pre> <p>For more detailed examples, see the example files in the repository.</p>"},{"location":"usage/getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with nvim-toolkit.</p>"},{"location":"usage/getting-started/#installation","title":"Installation","text":""},{"location":"usage/getting-started/#using-packernvim","title":"Using packer.nvim","text":"<pre><code>use {'greggh/nvim-toolkit'}\n</code></pre>"},{"location":"usage/getting-started/#using-lazynvim","title":"Using lazy.nvim","text":"<pre><code>{\n  'greggh/nvim-toolkit',\n  lazy = true\n}\n</code></pre>"},{"location":"usage/getting-started/#using-git-submodule","title":"Using Git Submodule","text":"<p>For Neovim plugin projects, you may want to include nvim-toolkit as a git submodule:</p> <pre><code>git submodule add https://github.com/greggh/nvim-toolkit external/nvim-toolkit\n</code></pre> <p>Then in your Lua code:</p> <pre><code>-- Add the submodule to package.path\nlocal path_sep = vim.loop.os_uname().sysname:match(\"Windows\") and \"\\\\\" or \"/\"\nvim.opt.runtimepath:append(vim.fn.fnamemodify(\"external/nvim-toolkit\", \":p\"))\n\n-- Now you can require it\nlocal toolkit = require('nvim_toolkit')\n</code></pre>"},{"location":"usage/getting-started/#basic-configuration","title":"Basic Configuration","text":"<p>After installing nvim-toolkit, you can configure it in your Neovim configuration:</p> <pre><code>-- Require the main module\nlocal toolkit = require('nvim_toolkit')\n\n-- Setup with default options\ntoolkit.setup()\n\n-- Or with custom options\ntoolkit.setup({\n  log = {\n    level = \"info\",                                       -- Log level (debug, info, warn, error)\n    file = vim.fn.stdpath(\"cache\") .. \"/logs/myapp.log\", -- Log file path\n    use_colors = true                                     -- Use colors in console output\n  },\n  ui = {\n    float = {\n      border = \"rounded\", -- Window border style\n      width = 80,         -- Default width\n      height = 20         -- Default height\n    }\n  },\n  fs = {\n    cache_timeout = 60 -- Cache timeout in seconds\n  }\n})\n</code></pre>"},{"location":"usage/getting-started/#using-modules-independently","title":"Using Modules Independently","text":"<p>You can use each module independently:</p> <pre><code>-- Use the logging module\nlocal log = require('nvim_toolkit.log')\nlog.info(\"Application started\")\nlog.debug(\"Debug information\", { details = \"More info\" })\n\n-- Use the UI module\nlocal ui = require('nvim_toolkit.ui')\nlocal win, buf = ui.float.open({\n  title = \"My Window\",\n  content = {\"Line 1\", \"Line 2\"},\n})\n\n-- Use the filesystem module\nlocal fs = require('nvim_toolkit.fs')\nlocal root = fs.find_root()\nlocal file_content = fs.read_file(\"/path/to/file\")\n\n-- Use the API wrappers\nlocal api = require('nvim_toolkit.api')\napi.create_autocmd(\"BufWritePre\", {\n  pattern = \"*.lua\",\n  callback = function() print(\"Saving Lua file\") end\n})\n\n-- Use the config module\nlocal config = require('nvim_toolkit.config')\nlocal validated = config.validate(user_config, schema)\n\n-- Use the keymap module\nlocal keymap = require('nvim_toolkit.keymap')\nkeymap.register_group(\"&lt;leader&gt;f\", {\n  f = keymap.bind.map_cr(\"Telescope find_files\"):with_desc(\"Find files\"):with_common_options(),\n})\n</code></pre> <p>See the Examples page for more detailed usage examples.</p>"}]}